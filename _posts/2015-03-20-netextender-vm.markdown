---
layout: post
title:  "Sandboxing NetExtender VPN within a Virtual Machine"
date:   2015-03-20 14:14:09
categories: vm vpn 
---
A VPN connection can be really handy for getting onto your home or work network.  We use NetExtender, which seems to do a pretty good job; however, requires root privileges and adds routes defined by the VPN server. (Which isn't under my control.)

I prefer to run my NetExtender client inside a virtual machine in order to prevent it from having root on my host machine.  This also gives me absolute control over the routes sent through the tunnel. (I'd really prefer to run it in a Docker container; but without a privileged container, Docker prevents NetExtender from creating the tunnel.)

First I created a lightweight virtual machine running Ubuntu Server.  It doesn't need much in the way of resources.  (I've allocated 1 cpu, 256 MB of ram and an 8 GB disk image to mine.)  I created two networks, eth0 is on my default network (NAT to the internet) and eth1 is on an internal network that is only accessible from the host machine.

Install the NetExtender Linux client on the virtual machine.

Edit /etc/sysctl.conf and uncomment the net.ipv4.ip_forward line.

Add the following lines above the exit 0 in the vm's /etc/rc.local:

{% highlight bash %}
/sbin/iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
/sbin/iptables -A FORWARD -i ppp0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
/sbin/iptables -A FORWARD -i eth1 -o ppp0 -j ACCEPT
{% endhighlight %}

Copy the [netextender init script][init.d-netextender] into the vm's /etc/init.d folder.

Copy the [netextender default values][default-netextender] into the vm's /etc/default folder.

The above two scripts are courtesy of [moonwatcher's gist][script-source].

Edit /etc/default/netextender and set your vpn info.

Run:

{% highlight bash %}
sudo chown root:root /etc/init.d/netextender
sudo chmod 700 /etc/init.d/netextender
sudo chown root:root /etc/default/netextender
sudo chmod 700 /etc/default/netextender
sudo update-rc.d netextender defaults
sudo update-rc.d netextender enable
sudo shutdown -r now
{% endhighlight %}

Now on your host machine, you'll want to set up routes and dns.

Download [vpn.bash][vpn.bash] and source it in your .bashrc file.

Add the following to your .bashrc (Replacing the values to the right of the = with IP addresses):

{% highlight bash %}
export VPN_GATEWAY=YOUR_VPN_ETH_1_IP
export VPN_NAMESERVER=YOUR_VPN_DNS
{% endhighlight %}

Update your /etc/resolvconf/resolv.conf.d/head to be the following:
{% highlight bash %}
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# nameserver VPN_NAMESERVER
{% endhighlight %}

Create a file called .vpn.routes in your home directory and add your desired routes. Example:

{% highlight bash %}
192.168.0.0/16
192.169.0.0/16
{% endhighlight %}

Now you can use the vpn-on or vpn-off aliases from [vpn.bash][vpn.bash] to enable or disable your vpn at will!

[init.d-netextender]: /attachments/scripts/etc/init.d/netextender
[default-netextender]: /attachments/scripts/etc/default/netextender
[script-source]: https://gist.github.com/moonwatcher/5463993
[vpn.bash]: https://raw.githubusercontent.com/brosander/shell-util-repo/master/vpn.bash
